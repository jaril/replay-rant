"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pingTestMetrics = void 0;
const os_1 = __importDefault(require("os"));
const node_fetch_1 = __importDefault(require("node-fetch"));
function shouldReportTestMetrics() {
    var _a;
    const optOut = (_a = process.env.RECORD_REPLAY_TEST_METRICS) === null || _a === void 0 ? void 0 : _a.toLowerCase();
    return !optOut || !(optOut === "0" || optOut === "false");
}
function pingTestMetrics(recordingId, runId, test) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!shouldReportTestMetrics())
            return;
        const webhookUrl = process.env.RECORD_REPLAY_WEBHOOK_URL || "https://webhooks.replay.io";
        try {
            return yield (0, node_fetch_1.default)(`${webhookUrl}/api/metrics`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    type: "test.finished",
                    recordingId,
                    test: Object.assign(Object.assign({}, test), { platform: os_1.default.platform, runId, env: {
                            disableAsserts: !!process.env.RECORD_REPLAY_DISABLE_ASSERTS,
                            disableSourcemapCollection: !!process.env.RECORD_REPLAY_DISABLE_SOURCEMAP_COLLECTION,
                            disableFeatures: process.env.RECORD_REPLAY_DISABLE_FEATURES || "none",
                        } }),
                }),
            });
        }
        catch (e) {
            console.log("Failed to send test metrics", e);
        }
    });
}
exports.pingTestMetrics = pingTestMetrics;
//# sourceMappingURL=metrics.js.map