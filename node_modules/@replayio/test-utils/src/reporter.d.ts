export interface ReplayReporterConfig {
    runTitle?: string;
    metadata?: Record<string, any> | string;
}
export interface TestError {
    message: string;
    name?: string;
    line?: number;
    column?: number;
}
export interface TestStep {
    id: string;
    parentId?: string;
    name: string;
    args?: any[];
    error?: TestError;
    relativeStartTime?: number;
    duration?: number;
    hook?: "beforeEach" | "afterEach";
    category: "command" | "assertion" | "other";
    commandId?: string;
    assertIds?: string[];
}
export interface Test {
    id?: string;
    title: string;
    path: string[];
    result: "passed" | "failed" | "timedOut" | "skipped" | "unknown";
    relativePath: string;
    error?: TestError;
    steps?: TestStep[];
    relativeStartTime?: number;
    duration?: number;
}
export interface TestRunner {
    name?: string;
    version?: string;
    plugin?: string;
}
export declare class ReporterError extends Error {
    testId: string;
    constructor(testId: string, message: string);
    valueOf(): {
        name: string;
        message: string;
        test: string;
    };
}
declare class ReplayReporter {
    baseId: any;
    baseMetadata: Record<string, any> | null;
    runTitle?: string;
    startTimes: Record<string, number>;
    runner?: TestRunner;
    errors: (string | Error | ReporterError)[];
    constructor(runner?: TestRunner);
    getTestId(testId?: string): any;
    parseConfig(config?: ReplayReporterConfig, metadataKey?: string): void;
    addError(err: Error | string): void;
    setDiagnosticMetadata(metadata: Record<string, unknown>): void;
    onTestSuiteBegin(config?: ReplayReporterConfig, metadataKey?: string): void;
    onTestBegin(testId?: string, metadataFilePath?: string): void;
    onTestEnd(tests: Test[], replayTitle?: string, extraMetadata?: Record<string, unknown>): void;
}
export default ReplayReporter;
//# sourceMappingURL=reporter.d.ts.map