/// <reference types="cypress" />
/// <reference types="cypress" />
/// <reference types="node" />
import { ReplayReporter } from "@replayio/test-utils";
import debug from "debug";
import { getDiagnosticConfig } from "./mode";
import type { StepEvent } from "./support";
declare class CypressReporter {
    reporter: ReplayReporter;
    config: Cypress.PluginConfigOptions;
    debug: debug.Debugger;
    startTime: number | undefined;
    steps: StepEvent[];
    selectedBrowser: string | undefined;
    errors: string[];
    diagnosticConfig: ReturnType<typeof getDiagnosticConfig>;
    constructor(config: Cypress.PluginConfigOptions, debug: debug.Debugger);
    onLaunchBrowser(browser: string): void;
    onBeforeSpec(spec: Cypress.Spec): void;
    onAfterSpec(spec: Cypress.Spec, result: CypressCommandLine.RunResult): void;
    getDiagnosticConfig(): {
        noRecord: boolean;
        env: NodeJS.ProcessEnv;
    };
    private setStartTime;
    private setSelectedBrowser;
    private clearSteps;
    addStep(step: StepEvent): void;
    private getTestResults;
}
export declare function getMetadataFilePath(workerIndex?: number): string;
export default CypressReporter;
//# sourceMappingURL=reporter.d.ts.map