"use strict";
/// <reference types="cypress" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetadataFilePath = exports.getCypressReporter = void 0;
const semver_1 = __importDefault(require("semver"));
const replay_1 = require("@replayio/replay");
const test_utils_1 = require("@replayio/test-utils");
const debug_1 = __importDefault(require("debug"));
const constants_1 = require("./constants");
const reporter_1 = __importStar(require("./reporter"));
Object.defineProperty(exports, "getMetadataFilePath", { enumerable: true, get: function () { return reporter_1.getMetadataFilePath; } });
const debug = (0, debug_1.default)("replay:cypress:plugin");
let cypressReporter;
const plugin = (on, config) => {
    var _a, _b;
    cypressReporter = new reporter_1.default(config, debug);
    const debugEvents = debug.extend("events");
    on("before:browser:launch", (browser, launchOptions) => {
        debugEvents("Handling before:browser:launch");
        cypressReporter.onLaunchBrowser(browser.family);
        debugEvents("Browser launching: %o", { family: browser.family });
        if (browser.name !== "electron" && config.version && semver_1.default.gte(config.version, "10.9.0")) {
            const diagnosticConfig = cypressReporter.getDiagnosticConfig();
            const noRecord = !!process.env.RECORD_REPLAY_NO_RECORD || diagnosticConfig.noRecord;
            const env = Object.assign({ RECORD_REPLAY_DRIVER: noRecord && browser.family === "chromium" ? __filename : undefined, RECORD_ALL_CONTENT: noRecord ? undefined : "1", RECORD_REPLAY_METADATA_FILE: (0, test_utils_1.initMetadataFile)((0, reporter_1.getMetadataFilePath)()) }, diagnosticConfig.env);
            debugEvents("Adding environment variables to browser: %o", env);
            return Object.assign(Object.assign({}, launchOptions), { env });
        }
    });
    on("before:spec", spec => {
        debugEvents("Handling before:spec %s", spec.relative);
        cypressReporter.onBeforeSpec(spec);
    });
    on("after:spec", (spec, result) => {
        debugEvents("Handling after:spec %s", spec.relative);
        cypressReporter.onAfterSpec(spec, result);
    });
    const debugTask = debug.extend("task");
    on("task", {
        // Events are sent to the plugin by the support adapter which runs in the
        // browser context and has access to `Cypress` and `cy` methods.
        [constants_1.TASK_NAME]: value => {
            debugTask("Handling %s task: %o", constants_1.TASK_NAME, value);
            if (!value || typeof value !== "object")
                return;
            cypressReporter.addStep(value);
            return true;
        },
    });
    // make sure we have a config object with the keys we need to mutate
    config = config || {};
    config.env = config.env || {};
    config.browsers = config.browsers || [];
    if (config.isTextTerminal) {
        config.env.NO_COMMAND_LOG =
            (_b = (_a = process.env.CYPRESS_NO_COMMAND_LOG) !== null && _a !== void 0 ? _a : config.env.NO_COMMAND_LOG) !== null && _b !== void 0 ? _b : 1;
        debug("Command log enabled? %s", config.env.NO_COMMAND_LOG);
    }
    const chromiumPath = (0, replay_1.getPlaywrightBrowserPath)("chromium");
    if (chromiumPath) {
        debug("Adding chromium to cypress at %s", chromiumPath);
        config.browsers = config.browsers.concat({
            name: "replay-chromium",
            channel: "stable",
            family: "chromium",
            displayName: "Replay",
            version: "91.0",
            path: chromiumPath,
            majorVersion: 91,
            isHeaded: true,
            isHeadless: false,
        });
    }
    else {
        debug("Chromium not supported on this platform", chromiumPath);
    }
    const firefoxPath = (0, replay_1.getPlaywrightBrowserPath)("firefox");
    if (firefoxPath) {
        debug("Adding firefox to cypress at %s", chromiumPath);
        config.browsers = config.browsers.concat({
            name: "replay-firefox",
            channel: "stable",
            family: "firefox",
            displayName: "Replay",
            version: "91.0",
            path: firefoxPath,
            majorVersion: 91,
            isHeaded: true,
            isHeadless: false,
        });
    }
    else {
        debug("Firefox not supported on this platform", chromiumPath);
    }
    return config;
};
function getCypressReporter() {
    return cypressReporter;
}
exports.getCypressReporter = getCypressReporter;
exports.default = plugin;
//# sourceMappingURL=index.js.map