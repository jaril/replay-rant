"use strict";
// Adapted from https://github.com/bahmutov/cypress-repeat
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecRepeatMode = void 0;
const cypress_1 = __importDefault(require("cypress"));
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)("replay:cypress:repeat");
// allows us to debug any cypress install problems
debug("requiring cypress with module.paths %o", module.paths);
/**
 * Quick and dirty deep clone
 */
const clone = (x) => JSON.parse(JSON.stringify(x));
function buildAllRunOptions(repeatNtimes, options) {
    const allRunOptions = [];
    for (let k = 0; k < repeatNtimes; k += 1) {
        const runOptions = clone(options);
        const envVariables = `cypress_repeat_n=${repeatNtimes},cypress_repeat_k=${k + 1}`;
        if (!("env" in runOptions)) {
            runOptions.env = envVariables;
        }
        else {
            runOptions.env += "," + envVariables;
        }
        if (options.record && options.group) {
            // we are recording, thus we need to update the group name
            // to avoid clashing
            runOptions.group = options.group;
            if (runOptions.group && repeatNtimes > 1) {
                // make sure if we are repeating this example
                // then the recording has group names on the Dashboard
                // like "example-1-of-20", "example-2-of-20", ...
                runOptions.group += `-${k + 1}-of-${repeatNtimes}`;
            }
        }
        allRunOptions.push(runOptions);
    }
    return allRunOptions;
}
var SpecRepeatMode;
(function (SpecRepeatMode) {
    SpecRepeatMode[SpecRepeatMode["All"] = 0] = "All";
    SpecRepeatMode[SpecRepeatMode["Failed"] = 1] = "Failed";
})(SpecRepeatMode = exports.SpecRepeatMode || (exports.SpecRepeatMode = {}));
function CypressRepeat({ repeat = 1, mode = SpecRepeatMode.All, untilPasses = false, args = [], }) {
    return __awaiter(this, void 0, void 0, function* () {
        const name = "cypress-repeat:";
        const rerunFailedOnly = mode === SpecRepeatMode.Failed;
        console.log("%s will repeat Cypress command %d time(s)", name, repeat);
        if (untilPasses) {
            console.log("%s but only until it passes", name);
        }
        if (rerunFailedOnly) {
            console.log("%s it only reruns specs which have failed", name);
        }
        const parseArguments = () => __awaiter(this, void 0, void 0, function* () {
            return yield cypress_1.default.cli.parseRunArguments(["cypress", "run", ...args]);
        });
        const options = yield parseArguments();
        debug("parsed CLI options %o", options);
        const allRunOptions = buildAllRunOptions(repeat, options);
        debug("run options %s", allRunOptions);
        for (let [k, runOptions] of allRunOptions.entries()) {
            const n = allRunOptions.length;
            const isLastRun = k === n - 1;
            console.log("***** %s %d of %d *****", name, k + 1, n);
            const testResults = yield cypress_1.default.run(runOptions);
            debug("is %d the last run? %o", k, { isLastRun, rerunFailedOnly, runs: testResults.runs }
            // JSON.stringify(testResults)
            );
            if (rerunFailedOnly && !isLastRun && "runs" in testResults) {
                const failedSpecs = testResults.runs
                    .filter(run => run.stats.failures != 0)
                    .map(run => run.spec.relative)
                    .join(",");
                if (failedSpecs.length) {
                    console.log("%s failed specs", name);
                    console.log(failedSpecs);
                    allRunOptions[k + 1].spec = failedSpecs;
                }
                else if (untilPasses) {
                    console.log("%s there were no failed specs", name);
                    console.log("%s exiting", name);
                    return 0;
                }
            }
            if (testResults.status === "failed") {
                // failed to even run Cypress tests
                if (testResults.failures) {
                    console.error(testResults.message);
                    return testResults.failures;
                }
            }
            if (testResults.status === "finished") {
                if (untilPasses) {
                    if (!testResults.totalFailed) {
                        console.log("%s successfully passed on run %d of %d", name, k + 1, n);
                        return 0;
                    }
                    console.error("%s run %d of %d failed", name, k + 1, n);
                    if (k === n - 1) {
                        console.error("%s no more attempts left", name);
                        return testResults.totalFailed;
                    }
                }
                else {
                    if (testResults.totalFailed) {
                        console.error("%s run %d of %d failed", name, k + 1, n, isLastRun);
                        if (isLastRun) {
                            return testResults.totalFailed;
                        }
                    }
                }
            }
            console.log("***** finished %d run(s) *****", k + 1);
        }
        return 0;
    });
}
exports.default = CypressRepeat;
//# sourceMappingURL=cypress-repeat.js.map