"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDiagnosticConfig = exports.configure = exports.DiagnosticLevel = exports.ReplayMode = void 0;
const debug_1 = __importDefault(require("debug"));
const uuid_1 = require("uuid");
const debug = (0, debug_1.default)("replay:cypress:mode");
// https://github.com/replayio/chromium-v8/blob/master/src/api/api.cc
const diagnosticFlags = [
    "record-replay",
    "gc-changes",
    "leak-references",
    "register-scripts",
    "emit-opcodes",
    "disallow-events",
    "avoid-weak-pointers",
    "pass-through-events",
    "no-asm-wasm",
    "no-compile-cache",
    "pointer-ids",
    "values",
    "checkpoints",
    "interrupts",
    "no-webgl",
    "no-language-detection",
    "no-media",
    "no-field-trials",
    "no-count-usage",
    "no-gpu",
    "no-call-stats",
    "no-park-strings",
    "no-render-workers",
    "no-page-timing-metrics",
    "no-interactive-detector",
    "notify-paints",
    "notify-network",
    "notify-html-parse",
    "collect-source-maps",
    "initialize-window-proxy",
    "react-devtools-backend",
    "disable-baseline-jit",
    "use-optimizing-jit",
    "browser-event",
    "disable-collect-events",
];
var ReplayMode;
(function (ReplayMode) {
    ReplayMode[ReplayMode["Record"] = 0] = "Record";
    ReplayMode[ReplayMode["RecordOnRetry"] = 1] = "RecordOnRetry";
    ReplayMode[ReplayMode["Diagnostics"] = 2] = "Diagnostics";
    ReplayMode[ReplayMode["Stress"] = 3] = "Stress";
})(ReplayMode = exports.ReplayMode || (exports.ReplayMode = {}));
var DiagnosticLevel;
(function (DiagnosticLevel) {
    DiagnosticLevel[DiagnosticLevel["None"] = 0] = "None";
    DiagnosticLevel[DiagnosticLevel["Basic"] = 1] = "Basic";
    DiagnosticLevel[DiagnosticLevel["Full"] = 2] = "Full";
})(DiagnosticLevel = exports.DiagnosticLevel || (exports.DiagnosticLevel = {}));
function configure(options) {
    // Set this modes into the environment so they can be picked up by the plugin
    process.env.REPLAY_CYPRESS_MODE = options.mode;
    process.env.REPLAY_CYPRESS_DIAGNOSTIC_LEVEL = options.level;
    const config = {
        mode: getReplayMode(),
        level: getDiagnosticLevel(),
        repeat: getRepeatCount(options.stressCount),
    };
    // configure shared metadata values
    process.env.RECORD_REPLAY_METADATA_TEST_RUN_MODE = toModeString(config.mode);
    // set a test run id so all the replays share a run when running in retry modes
    process.env.RECORD_REPLAY_METADATA_TEST_RUN_ID =
        process.env.RECORD_REPLAY_METADATA_TEST_RUN_ID || (0, uuid_1.v4)();
    return config;
}
exports.configure = configure;
function toModeString(mode) {
    switch (mode) {
        case ReplayMode.Record:
            return "record";
        case ReplayMode.RecordOnRetry:
            return "record-on-retry";
        case ReplayMode.Diagnostics:
            return "diagnostics";
        case ReplayMode.Stress:
            return "stress";
    }
}
function getReplayMode() {
    const { REPLAY_CYPRESS_MODE: mode } = process.env;
    switch (mode) {
        case "record-on-retry":
            return ReplayMode.RecordOnRetry;
        case "diagnostic":
        case "diagnostics":
            process.env.REPLAY_CYPRESS_MODE = "diagnostics";
            return ReplayMode.Diagnostics;
        case "stress":
            return ReplayMode.Stress;
    }
    process.env.REPLAY_CYPRESS_MODE = "record";
    return ReplayMode.Record;
}
function getDiagnosticLevel() {
    const mode = getReplayMode();
    const { REPLAY_CYPRESS_DIAGNOSTIC_LEVEL: level } = process.env;
    switch (level) {
        case "basic":
            return DiagnosticLevel.Basic;
        case "full":
            return DiagnosticLevel.Full;
    }
    return mode === ReplayMode.Diagnostics ? DiagnosticLevel.Basic : DiagnosticLevel.None;
}
function getRepeatCount(stressCount = 10) {
    const level = getDiagnosticLevel();
    switch (getReplayMode()) {
        case ReplayMode.RecordOnRetry:
            return 2;
        case ReplayMode.Diagnostics:
            return level === DiagnosticLevel.Basic ? 3 : diagnosticFlags.length + 3;
        case ReplayMode.Stress:
            return stressCount;
        case ReplayMode.Record:
            return 1;
    }
}
function getDiagnosticConfig(config) {
    let noRecord = false;
    let env = {};
    const { cypress_repeat_k } = config.env;
    const repeatIndex = cypress_repeat_k ? Number.parseInt(cypress_repeat_k) : undefined;
    const mode = getReplayMode();
    if (mode === ReplayMode.RecordOnRetry) {
        noRecord = repeatIndex === 1;
    }
    if (mode === ReplayMode.Diagnostics && repeatIndex) {
        switch (repeatIndex) {
            case 1:
                noRecord = true;
                break;
            case 2:
                break;
            case 3:
                env = {
                    RECORD_REPLAY_DISABLE_ASSERTS: "1",
                    RECORD_REPLAY_DISABLE_SOURCEMAP_COLLECTION: "1",
                };
                break;
            default:
                env = {
                    RECORD_REPLAY_DISABLE_FEATURES: diagnosticFlags[repeatIndex - 3],
                };
        }
    }
    const cfg = { noRecord, env };
    debug("Diagnostic configuration for mode %d: %o", mode, cfg);
    return cfg;
}
exports.getDiagnosticConfig = getDiagnosticConfig;
//# sourceMappingURL=mode.js.map