#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const install_1 = __importDefault(require("../src/install"));
const mode_1 = require("../src/mode");
const cypress_repeat_1 = __importStar(require("../src/cypress-repeat"));
const semver_1 = require("semver");
let [, , cmd, ...args] = process.argv;
let firstRun = false;
if (cmd === "first-run" && !process.env.REPLAY_SKIP_BROWSER_DOWNLOAD) {
    args = [];
    cmd = "install";
    firstRun = true;
}
function commandInstall() {
    console.log("Installing Replay browsers for cypress");
    let browser = args[0] || "all";
    (0, install_1.default)(browser).then(() => {
        console.log("Done");
    });
}
function parseRetryCount(arg) {
    const num = arg ? Number.parseInt(arg) : NaN;
    if (isNaN(num)) {
        throw new Error("Error: --count must be a number");
    }
    return num;
}
function commandRun() {
    return __awaiter(this, void 0, void 0, function* () {
        let modeOpt;
        let levelOpt;
        let retryCount;
        // TODO [ryanjduffy]: Migrate to commander
        while (args.length) {
            switch (args[0]) {
                case "-m":
                case "--mode":
                    args.shift();
                    modeOpt = args.shift();
                    continue;
                case "-l":
                case "--level":
                    args.shift();
                    levelOpt = args.shift();
                    continue;
                case "-c":
                case "--count":
                    args.shift();
                    retryCount = parseRetryCount(args.shift());
                    continue;
            }
            break;
        }
        const { repeat, mode } = (0, mode_1.configure)({ mode: modeOpt, level: levelOpt, stressCount: retryCount });
        if ((mode === mode_1.ReplayMode.Diagnostics || mode === mode_1.ReplayMode.RecordOnRetry) &&
            !(0, semver_1.gte)(require("cypress/package.json").version, "10.9.0")) {
            console.error("Cypress 10.9 or greater is required for diagnostic or record-on-retry modes");
            process.exit(1);
        }
        const failed = yield (0, cypress_repeat_1.default)({
            repeat,
            mode: mode === mode_1.ReplayMode.RecordOnRetry ? cypress_repeat_1.SpecRepeatMode.Failed : cypress_repeat_1.SpecRepeatMode.All,
            untilPasses: mode === mode_1.ReplayMode.RecordOnRetry,
            args,
        });
        process.exit(failed ? 1 : 0);
    });
}
function help() {
    console.log(`
npx @replayio/cypress

Provides utilities to support using Replay (https://replay.io) with Cypress

Available commands:

  - install [all | firefox | chromium]
    Installs all or the specified Replay browser

  - run
    Runs your cypress tests with additional repeat modes
  `);
}
(() => __awaiter(void 0, void 0, void 0, function* () {
    try {
        switch (cmd) {
            case "install":
                commandInstall();
                break;
            case "run":
                yield commandRun();
                break;
            case "help":
            default:
                help();
                break;
        }
    }
    catch (e) {
        if (firstRun) {
            // Log install errors during first-run but don't fail package install
            console.error(e);
        }
        else {
            throw e;
        }
    }
}))();
//# sourceMappingURL=replayio-cypress.js.map