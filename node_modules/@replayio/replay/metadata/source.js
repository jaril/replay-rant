"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = exports.validate = void 0;
const superstruct_1 = require("superstruct");
const node_fetch_1 = __importDefault(require("node-fetch"));
const debug_1 = __importDefault(require("debug"));
const { create, object, optional, defaulted } = require("superstruct");
const env_1 = require("./env");
const defaultObject = (objStruct) => optional(defaulted(object(objStruct), {}));
const debug = (0, debug_1.default)("replay:cli:metadata:source");
const VERSION = 1;
class GitHubHttpError extends Error {
    constructor(status, statusText) {
        super();
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "statusText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.status = status;
        this.statusText = statusText;
    }
}
function getCircleCISourceControlProvider(env) {
    var _a, _b;
    return ((_a = env.CIRCLE_PULL_REQUEST) === null || _a === void 0 ? void 0 : _a.startsWith("https://github.com"))
        ? "github"
        : ((_b = env.CIRCLE_PULL_REQUEST) === null || _b === void 0 ? void 0 : _b.startsWith("https://bitbucket.com"))
            ? "bitbucket"
            : undefined;
}
function getCircleCIRepository(env) {
    return env.CIRCLE_PROJECT_USERNAME && env.CIRCLE_PROJECT_REPONAME
        ? `${env.CIRCLE_PROJECT_USERNAME}/${env.CIRCLE_PROJECT_REPONAME}`
        : "";
}
function getCircleCIMergeId(env) {
    var _a;
    debug("Extracting merge id from %s", env.CIRCLE_PULL_REQUEST);
    return (_a = env.CIRCLE_PULL_REQUEST) === null || _a === void 0 ? void 0 : _a.split("/").pop();
}
function expandCommitMetadataFromGitHub(repo, sha) {
    return __awaiter(this, void 0, void 0, function* () {
        const { GITHUB_TOKEN, RECORD_REPLAY_METADATA_SOURCE_COMMIT_TITLE, RECORD_REPLAY_METADATA_SOURCE_COMMIT_URL, } = process.env;
        if (!repo || !sha)
            return;
        const url = `https://api.github.com/repos/${repo}/commits/${sha}`;
        debug("Fetching commit metadata from %s with %d char token", url, (GITHUB_TOKEN === null || GITHUB_TOKEN === void 0 ? void 0 : GITHUB_TOKEN.length) || 0);
        const resp = yield (0, node_fetch_1.default)(url, {
            headers: GITHUB_TOKEN
                ? {
                    Authorization: `token ${GITHUB_TOKEN}`,
                }
                : undefined,
        });
        if (resp.status === 200) {
            const json = yield resp.json();
            process.env.RECORD_REPLAY_METADATA_SOURCE_COMMIT_TITLE =
                RECORD_REPLAY_METADATA_SOURCE_COMMIT_TITLE ||
                    json.commit.message.split("\n").shift().substring(0, 80);
            process.env.RECORD_REPLAY_METADATA_SOURCE_COMMIT_URL =
                RECORD_REPLAY_METADATA_SOURCE_COMMIT_URL || json.html_url;
        }
        else {
            debug("Failed to fetch GitHub commit metadata: %o", resp);
            throw new GitHubHttpError(resp.status, resp.statusText);
        }
    });
}
function expandMergeMetadataFromGitHub(repo, pr) {
    return __awaiter(this, void 0, void 0, function* () {
        const { GITHUB_TOKEN, RECORD_REPLAY_METADATA_SOURCE_MERGE_TITLE, RECORD_REPLAY_METADATA_SOURCE_MERGE_URL, } = process.env;
        if (!repo || !pr)
            return;
        const url = `https://api.github.com/repos/${repo}/pulls/${pr}`;
        debug("Fetching merge metadata from %s with %d char token", url, (GITHUB_TOKEN === null || GITHUB_TOKEN === void 0 ? void 0 : GITHUB_TOKEN.length) || 0);
        const resp = yield (0, node_fetch_1.default)(url, {
            headers: GITHUB_TOKEN
                ? {
                    Authorization: `token ${GITHUB_TOKEN}`,
                }
                : undefined,
        });
        if (resp.status === 200) {
            const json = yield resp.json();
            process.env.RECORD_REPLAY_METADATA_SOURCE_MERGE_TITLE =
                RECORD_REPLAY_METADATA_SOURCE_MERGE_TITLE || json.title;
            process.env.RECORD_REPLAY_METADATA_SOURCE_MERGE_URL =
                RECORD_REPLAY_METADATA_SOURCE_MERGE_URL || json.html_url;
        }
        else {
            debug("Failed to fetch GitHub commit metadata: %o", resp);
            throw new GitHubHttpError(resp.status, resp.statusText);
        }
    });
}
const versions = () => ({
    1: object({
        branch: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_BRANCH", "GITHUB_REF_NAME", "BUILDKITE_BRANCH", "CIRCLE_BRANCH")),
        commit: defaultObject({
            id: (0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_COMMIT_ID", "GITHUB_SHA", "BUILDKITE_COMMIT", "CIRCLE_SHA1"),
            title: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_COMMIT_TITLE")),
            url: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_COMMIT_URL")),
        }),
        trigger: defaultObject({
            user: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_TRIGGER_USER", "GITHUB_ACTOR", "BUILDKITE_BUILD_CREATOR", "BUILDKITE_BUILD_AUTHOR", "CIRCLE_USERNAME", "CIRCLE_PR_USERNAME")),
            name: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_TRIGGER_NAME")),
            workflow: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_TRIGGER_WORKFLOW", "GITHUB_RUN_ID", "BUILDKITE_BUILD_NUMBER", "CIRCLE_BUILD_NUM")),
            url: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_TRIGGER_URL", env => env.GITHUB_WORKFLOW &&
                `${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}`, "BUILDKITE_BUILD_URL", "CIRCLE_BUILD_URL")),
        }),
        merge: defaultObject({
            id: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_MERGE_ID", "BUILDKITE_PULL_REQUEST", getCircleCIMergeId)),
            title: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_MERGE_TITLE")),
            url: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_MERGE_URL")),
        }),
        provider: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_PROVIDER", env => env.GITHUB_WORKFLOW && "github", "BUILDKITE_PIPELINE_PROVIDER", getCircleCISourceControlProvider)),
        repository: optional((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_REPOSITORY", "GITHUB_REPOSITORY", env => { var _a, _b; return (_b = (_a = env.BUILDKITE_REPO) === null || _a === void 0 ? void 0 : _a.match(/.*:(.*)\.git/)) === null || _b === void 0 ? void 0 : _b[1]; }, getCircleCIRepository)),
        version: defaulted((0, superstruct_1.number)(), () => 1),
    }),
});
function validate(metadata) {
    if (!metadata || !metadata.source) {
        throw new Error("Source metadata does not exist");
    }
    return init(metadata.source);
}
exports.validate = validate;
function expandEnvironment() {
    return __awaiter(this, void 0, void 0, function* () {
        const { CIRCLECI, CIRCLE_SHA1 } = process.env;
        const repo = getCircleCIRepository(process.env);
        try {
            if (CIRCLECI) {
                const provider = getCircleCISourceControlProvider(process.env);
                if (provider !== "github") {
                    debug("Unsupported source control provider: %s", process.env.CIRCLE_PULL_REQUEST);
                    return;
                }
                yield expandCommitMetadataFromGitHub(repo, CIRCLE_SHA1);
                yield expandMergeMetadataFromGitHub(repo, getCircleCIMergeId(process.env));
            }
        }
        catch (e) {
            if (e instanceof GitHubHttpError) {
                console.warn(`Unable to fetch pull request from GitHub: ${e.statusText}`);
                if (!process.env.GITHUB_TOKEN && e.status === 404) {
                    console.warn("If this is a private repo, you can set the GITHUB_TOKEN environment variable\nwith a personal access token to allow the Replay CLI to fetch this metadata.");
                }
            }
            console.warn("Failed to expand environment details", e);
        }
    });
}
function init(data = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const version = typeof data.version === "number" ? data.version : VERSION;
        yield expandEnvironment();
        const structs = versions();
        if (structs[version]) {
            return {
                source: create(data, structs[version]),
            };
        }
        else {
            throw new Error(`Source metadata version ${data.version} not supported`);
        }
    });
}
exports.init = init;
//# sourceMappingURL=source.js.map