"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = exports.source = exports.sanitize = exports.add = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const utils_1 = require("../src/utils");
const test = __importStar(require("./test"));
exports.test = test;
const source = __importStar(require("./source"));
exports.source = source;
// Each known metadata block should have a sanitizer that will check the contents before the upload
const handlers = {
    test: test.validate,
    source: source.validate,
};
const ALLOWED_KEYS = Object.keys(handlers);
function isAllowedKey(key) {
    return ALLOWED_KEYS.includes(key);
}
// Sanitizing arbitrary recording metadata before uploading by removing any
// non-object values (allowing null) and limiting object values to known keys or
// userspace keys prefixed by `x-`.
function sanitize(metadata, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const updated = {};
        for (const key of Object.keys(metadata)) {
            const value = metadata[key];
            if (typeof value !== "object") {
                (0, utils_1.maybeLog)(opts.verbose, `Ignoring metadata key "${key}". Expected an object but received ${typeof value}`);
                continue;
            }
            if (value === null || key.startsWith("x-")) {
                // passthrough null or userspace types
                updated[key] = value;
            }
            else if (isAllowedKey(key)) {
                // validate known types
                const validated = yield handlers[key](metadata);
                Object.assign(updated, validated);
            }
            else {
                // and warn when dropping all other types
                (0, utils_1.maybeLog)(opts.verbose, `Ignoring metadata key "${key}". Custom metadata blocks must be prefixed by "x-". Try "x-${key}" instead.`);
            }
        }
        return updated;
    });
}
exports.sanitize = sanitize;
/**
 * Adds unstructured metadata to the local recordings database.
 *
 * New metadata will be merged with existing data. If the same key is used by
 * multiple entries, the most recent entry's value will be used.
 *
 * Metadata is not validated until the recording is uploaded so arbitrary keys
 * may be used here to manage recordings before upload.
 *
 * @param recordingId UUID of the recording
 * @param metadata Recording metadata
 */
function add(recordingId, metadata) {
    const entry = {
        id: recordingId,
        kind: "addMetadata",
        metadata,
        timestamp: Date.now(),
    };
    (0, fs_1.appendFileSync)(path_1.default.join((0, utils_1.getDirectory)(), "recordings.log"), `\n${JSON.stringify(entry)}\n`);
}
exports.add = add;
//# sourceMappingURL=index.js.map