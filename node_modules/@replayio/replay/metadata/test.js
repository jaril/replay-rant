"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = exports.validate = void 0;
const superstruct_1 = require("superstruct");
const isUuid = require("is-uuid");
const env_1 = require("./env");
const VERSION = 1;
const versions = {
    1: (0, superstruct_1.object)({
        suite: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_TEST_SUITE")),
        file: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_TEST_FILE")),
        title: (0, env_1.envString)("RECORD_REPLAY_METADATA_TEST_TITLE"),
        path: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.string)())),
        result: (0, superstruct_1.defaulted)((0, superstruct_1.enums)(["passed", "failed", "timedOut", "skipped", "unknown"]), (0, env_1.firstEnvValueOf)("RECORD_REPLAY_METADATA_TEST_RESULT")),
        tests: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.object)({
            id: (0, superstruct_1.optional)((0, superstruct_1.string)()),
            parentId: (0, superstruct_1.optional)((0, superstruct_1.string)()),
            title: (0, superstruct_1.string)(),
            path: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.string)())),
            relativePath: (0, superstruct_1.optional)((0, superstruct_1.string)()),
            result: (0, superstruct_1.enums)(["passed", "failed", "timedOut", "skipped", "unknown"]),
            error: (0, superstruct_1.optional)((0, superstruct_1.object)({
                message: (0, superstruct_1.string)(),
                line: (0, superstruct_1.optional)((0, superstruct_1.number)()),
                column: (0, superstruct_1.optional)((0, superstruct_1.number)()),
            })),
            relativeStartTime: (0, superstruct_1.optional)((0, superstruct_1.number)()),
            duration: (0, superstruct_1.optional)((0, superstruct_1.number)()),
            steps: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.any)())),
        }))),
        runner: (0, superstruct_1.optional)((0, superstruct_1.defaulted)((0, superstruct_1.object)({
            name: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_TEST_RUNNER_NAME")),
            version: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_TEST_RUNNER_VERSION")),
            plugin: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_TEST_RUNNER_PLUGIN")),
        }), {})),
        run: (0, superstruct_1.optional)((0, superstruct_1.defaulted)((0, superstruct_1.object)({
            id: (0, superstruct_1.defaulted)((0, superstruct_1.define)("uuid", (v) => isUuid.v4(v)), (0, env_1.firstEnvValueOf)("RECORD_REPLAY_METADATA_TEST_RUN_ID", "RECORD_REPLAY_TEST_RUN_ID")),
            title: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_TEST_RUN_TITLE")),
            mode: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_TEST_RUN_MODE")),
        }), {})),
        version: (0, superstruct_1.defaulted)((0, superstruct_1.number)(), () => 1),
    }),
};
function validate(metadata) {
    if (!metadata || !metadata.test) {
        throw new Error("Test metadata does not exist");
    }
    return init(metadata.test);
}
exports.validate = validate;
function init(data = {}) {
    const version = typeof data.version === "number" ? data.version : VERSION;
    if (versions[version]) {
        return {
            test: (0, superstruct_1.create)(data, versions[version]),
        };
    }
    else {
        throw new Error(`Test metadata version ${data.version} not supported`);
    }
}
exports.init = init;
//# sourceMappingURL=test.js.map