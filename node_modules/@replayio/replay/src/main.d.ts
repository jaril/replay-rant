import { ensurePuppeteerBrowsersInstalled, ensurePlaywrightBrowsersInstalled, getPlaywrightBrowserPath, getPuppeteerBrowserPath, updateBrowsers } from "./install";
import { ExternalRecordingEntry, FilterOptions, ListOptions, MetadataOptions, Options, UploadOptions } from "./types";
export type { BrowserName } from "./types";
declare function listAllRecordings(opts?: Options & ListOptions): ExternalRecordingEntry[];
declare function uploadRecording(id: string, opts?: Options): Promise<string | null>;
declare function processRecording(id: string, opts?: Options): Promise<string | null>;
declare function uploadAllRecordings(opts?: Options & UploadOptions): Promise<boolean | undefined>;
declare function viewRecording(id: string, opts?: Options): Promise<boolean>;
declare function viewLatestRecording(opts?: Options): Promise<boolean>;
declare function removeRecording(id: string, opts?: Options): boolean;
declare function removeAllRecordings(opts?: {}): void;
declare function addLocalRecordingMetadata(recordingId: string, metadata: Record<string, unknown>): void;
declare function updateMetadata({ init: metadata, keys, filter, verbose, warn, }: MetadataOptions & FilterOptions): Promise<void>;
export { addLocalRecordingMetadata, listAllRecordings, uploadRecording, processRecording, uploadAllRecordings, viewRecording, viewLatestRecording, removeRecording, removeAllRecordings, updateBrowsers, updateMetadata, ensurePlaywrightBrowsersInstalled, ensurePuppeteerBrowsersInstalled, getPlaywrightBrowserPath, getPuppeteerBrowserPath, };
//# sourceMappingURL=main.d.ts.map